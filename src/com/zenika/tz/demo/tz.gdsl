package com.zenika.tz.demo

def ctx = context(scope: scriptScope())
contributor(ctx) {
    method(name: "setRegistry", params: [registry: 'java.lang.String'], doc: "Set docker private registry for this delivery context")
    method(name: "flow", params: [body: 'groovy.lang.Closure'], doc: "Begin delivery flow")
    method(name: "flow", namedParams: [parameter(name: "verbose", type: 'java.lang.Boolean')], params: [body: 'groovy.lang.Closure'], doc: "Begin delivery flow")
}

def flowCtx = context(scope: closureScope())
contributor(flowCtx) {
    def call = enclosingCall("flow")
    if(call) {
        method(name: "buildSources", params: [body: 'groovy.lang.Closure'], doc: "Begin sources building")
        method(name: "deploy", namedParams: [parameter(name: "host", type: 'java.lang.String'), parameter(name: "port", type: "java.lang.Integer")], params: [body: 'groovy.lang.Closure'], doc: "Begin application deployment")
    }
}

def srcCtx = context(scope: closureScope())
contributor(srcCtx) {
    def call = enclosingCall("buildSources")
    if(call) {
        method(name: "java", doc: "Build java sources in workspace")
        method(name: "analyze", params: [body: 'groovy.lang.Closure'], doc: "Perform sonar analyzis in preview mode")
        method(name: "createImage", namedParams: [parameter(name: "file", type: 'java.lang.String'), parameter(name: "script", type: 'groovy.lang.GString')], doc: "Build image from given Dockerfile path.")
    }
}

def analyzeCtx = context(scope: closureScope())
contributor(analyzeCtx) {
    def call = enclosingCall("analyze")
    if(call) {
        method(name: "failIf", namedParams: [parameter(name: "criticalsExceed", type: 'java.lang.Integer'), parameter(name: "blockingsExceed", type: 'java.lang.Integer')], doc: "Fail the job if one of this assertions fail")
    }
}

def deployCtx = context(scope: closureScope())
contributor(deployCtx) {
    def call = enclosingCall("deploy")
    if(call) {
        method(name: "dockerd", namedParams: [
            parameter(name: "image", type: "java.lang.String"),
            parameter(name: "tag", type: "java.lang.String"),
            parameter(name: "ports", type: "java.util.List"),
            parameter(name: "volumes", type: "java.util.List"),
            parameter(name: "opts", type: "java.lang.String")
        ], doc: "Create container from image specified at parameter (default is current app building) on host specified at deploy step.")
    }
}